{"version":3,"file":"static/js/259.172cb33a.chunk.js","mappings":"6MAaMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaI,QAAQD,WAC5BE,SAAUL,EAAAA,KAAaM,IAAI,GAAGH,aAE1BI,EAAY,SAAC,GAAc,IAAZL,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNM,OAAQ,SAAAC,GAAO,OAAI,SAAC,IAAD,UAAYA,QAmCrC,UA9Be,WACb,OACE,SAAC,KAAD,CACEC,cAAe,CAAER,KAAM,GAAIS,OAAQ,GAAIN,SAAU,IACjDO,iBAAkBb,EAFpB,UAKE,UAAC,KAAD,YACE,UAAC,IAAD,oBAEE,SAAC,KAAD,CAAOc,KAAK,OAAOX,KAAK,UACxB,SAACK,EAAD,CAAWL,KAAK,aAElB,UAAC,IAAD,qBAEE,SAAC,KAAD,CAAOW,KAAK,QAAQX,KAAK,WACzB,SAACK,EAAD,CAAWL,KAAK,cAElB,UAAC,IAAD,wBAEE,SAAC,KAAD,CAAOW,KAAK,WAAWX,KAAK,cAC5B,SAACK,EAAD,CAAWL,KAAK,iBAGlB,SAAC,IAAD,CAAeW,KAAK,SAApB","sources":["pages/register/SignUp.jsx"],"sourcesContent":["import * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\n// import { toast } from 'react-toastify';\n// import { useDispatch, useSelector } from 'react-redux';\n\nimport { Label } from 'components/ui/Label/Label';\nimport { PrimaryButton } from 'components/ui/buttons/PrimaryButton';\nimport {\n  FormEl,\n  ErrorText,\n  Input,\n} from 'components/ContactForm/ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  email: yup.string().email().required(),\n  password: yup.string().min(5).required(),\n});\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst SignUp = () => {\n  return (\n    <Formik\n      initialValues={{ name: '', number: '', password: '' }}\n      validationSchema={schema}\n      // onSubmit={handleSubmit}\n    >\n      <FormEl>\n        <Label>\n          Name:\n          <Input type=\"text\" name=\"name\" />\n          <FormError name=\"name\" />\n        </Label>\n        <Label>\n          Email:\n          <Input type=\"email\" name=\"email\" />\n          <FormError name=\"email\" />\n        </Label>\n        <Label>\n          Password:\n          <Input type=\"password\" name=\"password\" />\n          <FormError name=\"password\" />\n        </Label>\n\n        <PrimaryButton type=\"submit\">SignUp</PrimaryButton>\n      </FormEl>\n    </Formik>\n  );\n};\n\nexport default SignUp;\n\n// export const ContactForm = () => {\n//   const dispatch = useDispatch();\n//   const items = useSelector(getContact);\n\n//   const handleSubmit = (values, { resetForm }) => {\n//     const newContact = {\n//       id: nanoid(6),\n//       name: values.name,\n//       number: values.number,\n//     };\n//     if (\n//       items.find(item =>\n//         item.name.toLowerCase().includes(newContact.name.toLowerCase())\n//       )\n//     ) {\n//       toast.info(`${newContact.name} is already in contact`);\n//       return;\n//     } else {\n//       dispatch(addItem(newContact));\n//     }\n//     resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       initialValues={{ name: '', number: '' }}\n//       validationSchema={schema}\n//       onSubmit={handleSubmit}\n//     >\n//       <FormEl>\n//         <Label>\n//           Name:\n//           <Input type=\"text\" name=\"name\" />\n//           <FormError name=\"name\" />\n//         </Label>\n//         <Label>\n//           Number:\n//           <Input type=\"tel\" name=\"number\" />\n//           <FormError name=\"number\" />\n//         </Label>\n\n//         <PrimaryButton type=\"submit\">\n//           <PrimaryButtonIcon />\n//           Add contact\n//         </PrimaryButton>\n//       </FormEl>\n//     </Formik>\n//   );\n// };\n"],"names":["schema","yup","shape","name","required","email","password","min","FormError","render","message","initialValues","number","validationSchema","type"],"sourceRoot":""}