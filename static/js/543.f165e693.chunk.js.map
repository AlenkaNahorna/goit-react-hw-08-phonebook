{"version":3,"file":"static/js/543.f165e693.chunk.js","mappings":"8PAGaA,GAASC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,sKASNE,GAAQF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,yUACL,SAAAI,GAAC,OAAIA,EAAEC,MAAMC,MAAMC,KACb,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,MAAMC,SAG3B,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,OAAOC,gBAEd,SAAAP,GAAC,OAAIA,EAAEC,MAAMO,YAAYC,UAC3B,SAAAT,GAAC,OAAIA,EAAEC,MAAMS,UAAUC,KAMd,SAAAX,GAAC,OAAIA,EAAEC,MAAMK,OAAOM,eAI/BC,EAAYjB,EAAAA,EAAAA,EAAH,0DAEP,SAAAI,GAAC,OAAIA,EAAEC,MAAMS,UAAUP,M,oEC9BzBW,E,QAAQlB,EAAAA,MAAH,oIAGD,SAAAI,GAAC,OAAIA,EAAEC,MAAMO,YAAYC,UAC3B,SAAAT,GAAC,OAAIA,EAAEC,MAAMS,UAAUC,KACnB,SAAAX,GAAC,OAAIA,EAAEC,MAAMC,MAAMa,M,mICOhCC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaI,QAAQD,WAC5BE,SAAUL,EAAAA,KAAaM,IAAI,GAAGH,aAE1BI,EAAY,SAAC,GAAc,IAAZL,EAAW,EAAXA,KACnB,OACE,SAAC,KAAD,CACEA,KAAMA,EACNM,OAAQ,SAAAC,GAAO,OAAI,SAAC,IAAD,UAAYA,QAyErC,UApEe,WACb,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOV,EAAP,KAAaW,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOR,EAAP,KAAcU,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOP,EAAP,KAAiBU,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUf,EAAoB,EAApBA,KAAMgB,EAAc,EAAdA,MACtC,OAAQhB,GACN,IAAK,OACH,OAAOW,EAAQK,GACjB,IAAK,QACH,OAAOJ,EAASI,GAClB,IAAK,WACH,OAAOH,EAAYG,GACrB,QACE,SAYN,OACE,SAAC,KAAD,CACEC,cAAe,CAAEjB,KAAM,GAAIkB,OAAQ,GAAIf,SAAU,IACjDgB,iBAAkBtB,EAClBuB,SAZiB,SAAAC,GACnBA,EAAEC,iBACFd,EAASe,EAAAA,EAAAA,SAAoB,CAAEvB,KAAAA,EAAME,MAAAA,EAAOC,SAAAA,KAC5CQ,EAAQ,IACRC,EAAS,IACTC,EAAY,KAIZ,UAKE,UAAC,KAAD,YACE,UAAC,IAAD,oBAEE,SAAC,KAAD,CAAOW,KAAK,OAAOxB,KAAK,OAAOgB,MAAOhB,EAAMyB,SAAUX,KACtD,SAACT,EAAD,CAAWL,KAAK,aAGlB,UAAC,IAAD,qBAEE,SAAC,KAAD,CACEwB,KAAK,QACLxB,KAAK,QACLgB,MAAOd,EACPuB,SAAUX,KAEZ,SAACT,EAAD,CAAWL,KAAK,cAGlB,UAAC,IAAD,wBAEE,SAAC,KAAD,CACEwB,KAAK,WACLxB,KAAK,WACLgB,MAAOb,EACPsB,SAAUX,KAEZ,SAACT,EAAD,CAAWL,KAAK,iBAGlB,SAAC,IAAD,CAAewB,KAAK,SAApB","sources":["components/ContactForm/ContactForm.styled.js","components/ui/Label/Label.js","pages/SignUp/SignUp.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  justify-content: center;\n  margin-bottom: 30px;\n  padding-top: 10px;\n`;\n\nexport const Input = styled(Field)`\n  padding: ${p => p.theme.space.m};\n  border-radius: ${p => p.theme.radii.small};\n  height: 30px;\n  width: 400px;\n  color: ${p => p.theme.colors.primaryColor};\n  font-family: inherit;\n  font-weight: ${p => p.theme.fontWeights.normal};\n  font-size: ${p => p.theme.fontSizes.s};\n  border: none;\n  box-shadow: 5px 5px 10px 0px rgba(149, 167, 173, 1);\n  &:hover,\n  &:focus {\n    outline: none;\n    border: 2px solid ${p => p.theme.colors.accentColor};\n  }\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: ${p => p.theme.fontSizes.m};\n`;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-weight: ${p => p.theme.fontWeights.normal};\n  font-size: ${p => p.theme.fontSizes.s};\n  margin-bottom: ${p => p.theme.space.l};\n`;\n","import * as yup from 'yup';\nimport { Formik, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\n\nimport { Label } from 'components/ui/Label/Label';\nimport { PrimaryButton } from 'components/ui/buttons/PrimaryButton';\nimport {\n  FormEl,\n  ErrorText,\n  Input,\n} from 'components/ContactForm/ContactForm.styled';\nimport operations from 'redux/auth/authOperations';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  email: yup.string().email().required(),\n  password: yup.string().min(5).required(),\n});\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst SignUp = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(operations.register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '', password: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormEl>\n        <Label>\n          Name:\n          <Input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\n          <FormError name=\"name\" />\n        </Label>\n\n        <Label>\n          Email:\n          <Input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n          />\n          <FormError name=\"email\" />\n        </Label>\n\n        <Label>\n          Password:\n          <Input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleChange}\n          />\n          <FormError name=\"password\" />\n        </Label>\n\n        <PrimaryButton type=\"submit\">SignUp</PrimaryButton>\n      </FormEl>\n    </Formik>\n  );\n};\n\nexport default SignUp;\n"],"names":["FormEl","styled","Form","Input","Field","p","theme","space","m","radii","small","colors","primaryColor","fontWeights","normal","fontSizes","s","accentColor","ErrorText","Label","l","schema","yup","shape","name","required","email","password","min","FormError","render","message","dispatch","useDispatch","useState","setName","setEmail","setPassword","handleChange","target","value","initialValues","number","validationSchema","onSubmit","e","preventDefault","operations","type","onChange"],"sourceRoot":""}